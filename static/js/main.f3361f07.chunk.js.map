{"version":3,"sources":["components/Counter/btn/btn.module.css","components/Counter/setTablet/setTablet.module.css","components/Counter/Tablet/Tablet.module.css","components/Counter/Counter.module.css","components/Counter/Tablet/Tablet.tsx","components/Counter/btn/btn.tsx","components/Counter/setTablet/setTablet.tsx","components/Counter/Counter.tsx","App.tsx","index.tsx"],"names":["module","exports","tablet","s","tabletTop","setMsg","Tablet","pr","countValue","maxValue","btnOnOf","inStartValue","start_max_check","inMaxValue","className","resetBtn","resetBtnOff","incBtn","incBtnOff","setBtn","setBtnOffCl","Btn","resetCountValue","updateCountValue","typeBtn","setStartValue","setMaxValue","setBtnOnOf","start_max_value","startValue","inStartValueCheck","resetBtnDisabledChecker","incBtnDisabledChecker","setBtnDisabledChecker","resetBtnClass","incClass","setBtnClass","resetButton","disabled","onClick","incButton","setButton","setTablet","maxValueCl","startValueCl","maxValueClError","startValueClError","SetTablet","setInStartValue","setInMaxValue","MaxValueInputClass","StartValueInputClass","type","value","onChange","e","currentTarget","console","log","counter","btn","counterFlex","Counter","App","useState","setCountValue","newNum","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3361f07.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"resetBtn\":\"btn_resetBtn__3WkMB\",\"resetBtnOff\":\"btn_resetBtnOff__1zr0Q\",\"setBtn\":\"btn_setBtn__hCjW2\",\"setBtnOffCl\":\"btn_setBtnOffCl__3oceA\",\"incBtn\":\"btn_incBtn__UG930\",\"incBtnOff\":\"btn_incBtnOff__3avTM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setTablet\":\"setTablet_setTablet__2FwGk\",\"maxValueCl\":\"setTablet_maxValueCl__2NJEZ\",\"startValueCl\":\"setTablet_startValueCl__3HabI\",\"maxValueClError\":\"setTablet_maxValueClError__3S_Pa\",\"startValueClError\":\"setTablet_startValueClError__1JE23\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablet\":\"Tablet_tablet__lVZqX\",\"tabletTop\":\"Tablet_tabletTop__2z988\",\"setMsg\":\"Tablet_setMsg__zSZ9Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1Z09q\",\"btn\":\"Counter_btn__18Q6H\",\"counterFlex\":\"Counter_counterFlex__CxVc7\"};","import React from 'react';\r\nimport s from './Tablet.module.css';\r\n\r\nconst {tablet, tabletTop, setMsg} = s;\r\n\r\ntype TabletPropsType = {\r\n    countValue: number\r\n    maxValue: number\r\n    btnOnOf: boolean\r\n    inStartValue: number\r\n    inMaxValue: number\r\n}\r\n\r\n\r\nexport const Tablet = (pr: TabletPropsType) => {\r\n    const {countValue, maxValue, btnOnOf, inStartValue, inMaxValue} = pr;\r\n\r\n\r\n    const StartValueCheck = inStartValue >= 0 ?\r\n        <div>\r\n            {btnOnOf && countValue}\r\n            {!btnOnOf && <div className={setMsg}>Press 'set' to programm counter</div>}\r\n        </div>\r\n        :\r\n        <div className={setMsg}>Start value must be 0(zero) or greater</div>;\r\n\r\n    const start_max_check = inStartValue < inMaxValue ?\r\n        StartValueCheck\r\n        :\r\n        <div className={setMsg}>Max value must be greater than Start Value</div>\r\n\r\n\r\n    return (\r\n        <div className={+countValue < maxValue ? tablet : tabletTop}>\r\n            {start_max_check}\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport s from './btn.module.css';\r\n\r\nconst {resetBtn, resetBtnOff, incBtn, incBtnOff, setBtn, setBtnOffCl} = s;\r\n\r\ntype BtnPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf?: Dispatch<SetStateAction<boolean>>\r\n    startValue?: number\r\n    resetCountValue?: () => void\r\n    countValue: number\r\n    updateCountValue?: () => void\r\n    typeBtn: 'reset' | 'inc' | 'set'\r\n    maxValue?: any\r\n    inMaxValue: number\r\n    inStartValue: number\r\n    setStartValue?: Dispatch<SetStateAction<number>>\r\n    setMaxValue?: Dispatch<SetStateAction<number>>\r\n}\r\n\r\n\r\nexport const Btn = (pr: BtnPropsType) => {\r\n\r\n    const {\r\n        resetCountValue, countValue, updateCountValue,\r\n        typeBtn,\r\n        maxValue, inMaxValue, inStartValue, setStartValue,\r\n        setMaxValue,\r\n        btnOnOf, setBtnOnOf, startValue,\r\n    } = pr;\r\n\r\n    const start_max_value = inStartValue > inMaxValue;\r\n    const inStartValueCheck = inStartValue < 0\r\n    const disResetBtn = countValue === inStartValue;\r\n    const disInc = countValue >= inMaxValue\r\n\r\n    const resetBtnClassChecker = countValue > 0 && !inStartValueCheck && btnOnOf && !start_max_value; //тернарники\r\n    const incClassChecker = countValue < inMaxValue && !inStartValueCheck && btnOnOf && !start_max_value;// для классов кнопок(ошибка/нет ошибки)\r\n    const setBtnClassChecker = btnOnOf || inStartValueCheck || start_max_value;\r\n\r\n    const resetBtnDisabledChecker = !btnOnOf || disResetBtn || inStartValueCheck || start_max_value;//тернарники для отключения кнопок\r\n    const incBtnDisabledChecker = !btnOnOf || disInc || inStartValueCheck || start_max_value;\r\n    const setBtnDisabledChecker = btnOnOf || inStartValueCheck || start_max_value;\r\n\r\n    const resetBtnClass = resetBtnClassChecker ? resetBtn : resetBtnOff // присваиваем переменным классы в зависимости от тернарников выше\r\n    const incClass = incClassChecker ? incBtn : incBtnOff\r\n    const setBtnClass = setBtnClassChecker ? setBtnOffCl : setBtn;\r\n\r\n    const onClickSet = () => {\r\n        if (resetCountValue) {\r\n            resetCountValue()\r\n        }\r\n        if (setBtnOnOf) {\r\n            setBtnOnOf(true);\r\n        }\r\n    }\r\n\r\n\r\n    const resetButton = typeBtn === 'reset' ? <div className={resetBtnClass}>\r\n        <button disabled={resetBtnDisabledChecker}\r\n                onClick={resetCountValue}>reset\r\n        </button>\r\n    </div> : '';\r\n\r\n    const incButton = typeBtn === 'inc' ? <div className={incClass}>\r\n        <button disabled={incBtnDisabledChecker} onClick={updateCountValue}>inc\r\n        </button>\r\n    </div> : '';\r\n    const setButton = typeBtn === 'set' ? <div className={setBtnClass}>\r\n        <button disabled={setBtnDisabledChecker} onClick={onClickSet}>set</button>\r\n    </div> : '';\r\n\r\n    return (<div>\r\n            {resetButton}\r\n            {incButton}\r\n            {setButton}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEventHandler, Dispatch, SetStateAction} from 'react';\r\nimport s from './setTablet.module.css';\r\n\r\nconst {setTablet, maxValueCl, startValueCl, maxValueClError, startValueClError} = s;\r\n\r\ntype TabletPropsType = {\r\n    setBtnOnOf: Dispatch<SetStateAction<boolean>>\r\n    inStartValue: number\r\n    setInStartValue: (newX: any) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: any) => void\r\n}\r\n\r\n\r\nexport const SetTablet = (pr: TabletPropsType) => {\r\n    const {\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue, setBtnOnOf\r\n    } = pr;\r\n\r\n    const start_max_value = inStartValue < inMaxValue;\r\n    const onChangeInMaxValue: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.currentTarget.value) {\r\n\r\n            setInMaxValue(+e.currentTarget.value);\r\n        } else {\r\n            setInMaxValue('');\r\n        }\r\n        setBtnOnOf(false);\r\n    }\r\n\r\n    const onChangeInStartValue: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.currentTarget.value) {\r\n            console.log('start value change')\r\n            setInStartValue(e.currentTarget.value);\r\n        } else {\r\n            setInStartValue('');\r\n        }\r\n        setBtnOnOf(false);\r\n    }\r\n\r\n    const MaxValueInputClass = inMaxValue && start_max_value ? maxValueCl : maxValueClError;\r\n    const StartValueInputClass = inStartValue > -1 && start_max_value ? startValueCl : startValueClError;\r\n\r\n    return (\r\n        <div className={setTablet}>\r\n            <div className={MaxValueInputClass}>max value: <input type=\"number\" value={inMaxValue}\r\n                                                                  onChange={onChangeInMaxValue}/></div>\r\n            <div className={StartValueInputClass}>start value: <input type=\"number\" value={inStartValue}\r\n                                                                      onChange={onChangeInStartValue}/></div>\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport {Tablet} from './Tablet/Tablet';\r\nimport s from './Counter.module.css'\r\nimport {Btn} from './btn/btn';\r\nimport {SetTablet} from './setTablet/setTablet';\r\n\r\nconst {counter, btn, counterFlex} = s;\r\n\r\ntype CounterPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf: Dispatch<SetStateAction<boolean>>\r\n    inStartValue: number\r\n    setInStartValue: (newX: number) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: number) => void\r\n    countValue: number\r\n    updateCountValue: () => void\r\n    setStartValue: Dispatch<SetStateAction<number>>\r\n    setMaxValue: Dispatch<SetStateAction<number>>\r\n    resetCountValue: () => void\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\n\r\nexport const Counter = (pr: CounterPropsType) => {\r\n\r\n    const {\r\n        countValue, updateCountValue, resetCountValue,\r\n        maxValue,\r\n        startValue, setStartValue, setMaxValue,\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue,\r\n        btnOnOf, setBtnOnOf\r\n    } = pr;\r\n\r\n    return (<div className={counterFlex}>\r\n            <div className={counter}>\r\n                <Tablet inStartValue={inStartValue}\r\n                        btnOnOf={btnOnOf}\r\n                        maxValue={maxValue}\r\n                        countValue={countValue}\r\n                        inMaxValue={inMaxValue}/>\r\n                <div className={btn}>\r\n                    <Btn\r\n                        btnOnOf={btnOnOf}\r\n                        inStartValue={inStartValue}\r\n                        inMaxValue={inMaxValue}\r\n                        maxValue={maxValue}\r\n                        countValue={countValue}\r\n                        typeBtn={'inc'}\r\n                        updateCountValue={updateCountValue}/>\r\n                    <Btn btnOnOf={btnOnOf}\r\n                         inStartValue={inStartValue}\r\n                         inMaxValue={inMaxValue}\r\n                         countValue={countValue}\r\n                         typeBtn={'reset'}\r\n                         resetCountValue={resetCountValue}\r\n                         startValue={startValue}/>\r\n                </div>\r\n            </div>\r\n            <div className={counter}>\r\n                <SetTablet setBtnOnOf={setBtnOnOf}\r\n                           setInStartValue={setInStartValue}\r\n                           setInMaxValue={setInMaxValue}\r\n                           inMaxValue={inMaxValue}\r\n                           inStartValue={inStartValue}/>\r\n                <div className={btn}>\r\n                    <Btn btnOnOf={btnOnOf}\r\n                         setBtnOnOf={setBtnOnOf}\r\n                         resetCountValue={resetCountValue}\r\n                         setMaxValue={setMaxValue}\r\n                         countValue={countValue}\r\n                         typeBtn={'set'}\r\n                         inMaxValue={inMaxValue}\r\n                         inStartValue={inStartValue}\r\n                         setStartValue={setStartValue}\r\n                         startValue={startValue}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from './components/Counter/Counter';\n\n\nconst App = () => {\n    let [countValue, setCountValue] = useState<number>(0)\n\n    let [maxValue, setMaxValue] = useState<number>(5)\n    let [startValue, setStartValue] = useState<number>(0)\n\n    let [inStartValue, setInStartValue] = useState<number>(0);\n    let [inMaxValue, setInMaxValue] = useState<number>(5);\n\n    let [btnOnOf, setBtnOnOf] = useState<boolean>(true);\n\n    const updateCountValue = () => {\n        if (countValue < inMaxValue) {\n            let newNum = ++countValue;\n            setCountValue(newNum)\n        }\n    }\n\n    const resetCountValue = () => {\n        setCountValue(inStartValue);\n        setMaxValue(inMaxValue);\n    }\n\n\n    return (\n        <Counter inStartValue={inStartValue}\n                 setInStartValue={setInStartValue}\n                 inMaxValue={inMaxValue}\n                 setInMaxValue={setInMaxValue}\n                 startValue={startValue}\n                 setStartValue={setStartValue}\n                 setMaxValue={setMaxValue}\n                 maxValue={maxValue}\n                 countValue={countValue}\n                 updateCountValue={updateCountValue}\n                 resetCountValue={resetCountValue}\n                 btnOnOf={btnOnOf}\n                 setBtnOnOf={setBtnOnOf}\n        />\n    );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n    ReactDOM.render(\n        <App />,\n        document.getElementById('root')\n    );\n"],"sourceRoot":""}