{"version":3,"sources":["components/Counter/btn/btn.module.css","components/Counter/setTablet/setTablet.module.css","components/Counter/Tablet/Tablet.module.css","components/Counter/Counter.module.css","components/Counter/Tablet/Tablet.tsx","components/Counter/btn/btn.tsx","components/Counter/setTablet/setTablet.tsx","components/Counter/Counter.tsx","App.tsx","index.tsx"],"names":["module","exports","tablet","s","tabletTop","setMsg","Tablet","pr","countValue","btnOnOf","maxValue","inStartValue","inMaxValue","finallyCheck","className","resetBtn","resetBtnOff","incBtn","incBtnOff","setBtn","setBtnOffCl","Btn","resetCountValue","updateCountValue","typeBtn","setStartValue","setMaxValue","setBtnOnOf","start_max_value","startValue","inStartValueCheck","resetBtnDisabledChecker","incBtnDisabledChecker","setBtnDisabledChecker","resetBtnClass","incClass","setBtnClass","resetButton","disabled","onClick","incButton","setButton","localStorage","setItem","JSON","stringify","setTablet","maxValueCl","startValueCl","maxValueClError","startValueClError","SetTablet","setInStartValue","setInMaxValue","MaxValueInputClass","StartValueInputClass","type","value","onChange","e","currentTarget","counter","btn","counterFlex","Counter","App","useState","setCountValue","useEffect","getItem","newInStart","parse","inStartValueLS","newInMax","inMaxValueLS","newCountValue","countValueLS","newNum","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ecac27c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"resetBtn\":\"btn_resetBtn__3WkMB\",\"resetBtnOff\":\"btn_resetBtnOff__1zr0Q\",\"setBtn\":\"btn_setBtn__hCjW2\",\"setBtnOffCl\":\"btn_setBtnOffCl__3oceA\",\"incBtn\":\"btn_incBtn__UG930\",\"incBtnOff\":\"btn_incBtnOff__3avTM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setTablet\":\"setTablet_setTablet__2FwGk\",\"maxValueCl\":\"setTablet_maxValueCl__2NJEZ\",\"startValueCl\":\"setTablet_startValueCl__3HabI\",\"maxValueClError\":\"setTablet_maxValueClError__3S_Pa\",\"startValueClError\":\"setTablet_startValueClError__1JE23\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablet\":\"Tablet_tablet__lVZqX\",\"tabletTop\":\"Tablet_tabletTop__2z988\",\"setMsg\":\"Tablet_setMsg__zSZ9Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1Z09q\",\"btn\":\"Counter_btn__18Q6H\",\"counterFlex\":\"Counter_counterFlex__CxVc7\"};","import React from 'react';\r\nimport s from './Tablet.module.css';\r\n\r\nconst {tablet, tabletTop, setMsg} = s;\r\n\r\ntype TabletPropsType = {\r\n    countValue: number\r\n    maxValue: number\r\n    btnOnOf: boolean\r\n    inStartValue: number\r\n    inMaxValue: number\r\n}\r\n\r\n\r\nexport const Tablet = (pr: TabletPropsType) => {\r\n    const {countValue, maxValue, btnOnOf, inStartValue, inMaxValue} = pr;\r\n\r\n\r\n\r\n    const StartValueCheck = inStartValue >= 0 ?\r\n        <div>\r\n            {btnOnOf && countValue}\r\n            {!btnOnOf && <div className={setMsg}>Press 'set' to programm counter</div>}\r\n        </div>\r\n        :\r\n        <div className={setMsg}>Start value must be 0(zero) or greater</div>;\r\n\r\n\r\n    const start_max_check = inStartValue < inMaxValue ?\r\n        StartValueCheck\r\n        :\r\n        <div className={setMsg}>Max value must be greater than Start Value</div>\r\n\r\n\r\n    const inMaxValueCheck =  countValue <= inMaxValue ?\r\n        start_max_check\r\n        :\r\n        <div className={setMsg}>Please type reset!</div>\r\n\r\n    const finallyCheck = countValue >= inStartValue ?\r\n        inMaxValueCheck\r\n        :\r\n        <div className={setMsg}>Please type set!</div>\r\n\r\n\r\n    return (\r\n        <div className={+countValue < inMaxValue ? tablet : tabletTop}>\r\n            {finallyCheck}\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport s from './btn.module.css';\r\n\r\nconst {resetBtn, resetBtnOff, incBtn, incBtnOff, setBtn, setBtnOffCl} = s;\r\n\r\ntype BtnPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf?: Dispatch<SetStateAction<boolean>>\r\n    startValue?: number\r\n    resetCountValue?: () => void\r\n    countValue: number\r\n    updateCountValue?: () => void\r\n    typeBtn: 'reset' | 'inc' | 'set'\r\n    maxValue?: any\r\n    inMaxValue: number\r\n    inStartValue: number\r\n    setStartValue?: Dispatch<SetStateAction<number>>\r\n    setMaxValue?: Dispatch<SetStateAction<number>>\r\n}\r\n\r\n\r\nexport const Btn = (pr: BtnPropsType) => {\r\n\r\n    const {\r\n        resetCountValue, countValue, updateCountValue,\r\n        typeBtn,\r\n        maxValue, inMaxValue, inStartValue, setStartValue,\r\n        setMaxValue,\r\n        btnOnOf, setBtnOnOf, startValue,\r\n    } = pr;\r\n\r\n    const start_max_value = inStartValue > inMaxValue;\r\n    const inStartValueCheck = inStartValue < 0\r\n    const disResetBtn = countValue === inStartValue;\r\n    const disInc = countValue >= inMaxValue\r\n\r\n    const resetBtnClassChecker = countValue > 0 && !inStartValueCheck && btnOnOf && !start_max_value; //тернарники\r\n    const incClassChecker = countValue < inMaxValue && !inStartValueCheck && btnOnOf && !start_max_value;// для классов кнопок(ошибка/нет ошибки)\r\n    const setBtnClassChecker = btnOnOf || inStartValueCheck || start_max_value;\r\n\r\n    const resetBtnDisabledChecker = !btnOnOf || disResetBtn || inStartValueCheck || start_max_value;//тернарники для отключения кнопок\r\n    const incBtnDisabledChecker = !btnOnOf || disInc || inStartValueCheck || start_max_value;\r\n    const setBtnDisabledChecker = btnOnOf || inStartValueCheck || start_max_value;\r\n\r\n    const resetBtnClass = resetBtnClassChecker ? resetBtn : resetBtnOff // присваиваем переменным классы в зависимости от тернарников выше\r\n    const incClass = incClassChecker ? incBtn : incBtnOff\r\n    const setBtnClass = setBtnClassChecker ? setBtnOffCl : setBtn;\r\n\r\n    const onClickSet = () => {\r\n        if (resetCountValue) {\r\n            resetCountValue()\r\n            localStorage.setItem('InStartValue', JSON.stringify(inStartValue));\r\n            localStorage.setItem('InMaxValue', JSON.stringify(inMaxValue));\r\n        }\r\n        if (setBtnOnOf) {\r\n            setBtnOnOf(true);\r\n        }\r\n    }\r\n\r\n\r\n    const resetButton = typeBtn === 'reset' ? <div className={resetBtnClass}>\r\n        <button disabled={resetBtnDisabledChecker}\r\n                onClick={resetCountValue}>reset\r\n        </button>\r\n    </div> : '';\r\n\r\n    const incButton = typeBtn === 'inc' ? <div className={incClass}>\r\n        <button disabled={incBtnDisabledChecker} onClick={updateCountValue}>inc\r\n        </button>\r\n    </div> : '';\r\n    const setButton = typeBtn === 'set' ? <div className={setBtnClass}>\r\n        <button disabled={setBtnDisabledChecker} onClick={onClickSet}>set</button>\r\n    </div> : '';\r\n\r\n    return (<div>\r\n            {resetButton}\r\n            {incButton}\r\n            {setButton}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEventHandler, Dispatch, SetStateAction} from 'react';\r\nimport s from './setTablet.module.css';\r\n\r\nconst {setTablet, maxValueCl, startValueCl, maxValueClError, startValueClError} = s;\r\n\r\ntype TabletPropsType = {\r\n    setBtnOnOf: Dispatch<SetStateAction<boolean>>\r\n    inStartValue: number\r\n    setInStartValue: (newX: any) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: any) => void\r\n}\r\n\r\n\r\nexport const SetTablet = (pr: TabletPropsType) => {\r\n    const {\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue, setBtnOnOf\r\n    } = pr;\r\n\r\n    const start_max_value = inStartValue < inMaxValue;\r\n    const onChangeInMaxValue: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.currentTarget.value) {\r\n\r\n            setInMaxValue(+e.currentTarget.value);\r\n        } else {\r\n            setInMaxValue('');\r\n        }\r\n        setBtnOnOf(false);\r\n    }\r\n\r\n    const onChangeInStartValue: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.currentTarget.value) {\r\n            setInStartValue(e.currentTarget.value);\r\n        } else {\r\n            setInStartValue('');\r\n        }\r\n        setBtnOnOf(false);\r\n    }\r\n\r\n    const MaxValueInputClass = inMaxValue && start_max_value ? maxValueCl : maxValueClError;\r\n    const StartValueInputClass = inStartValue > -1 && start_max_value ? startValueCl : startValueClError;\r\n\r\n    return (\r\n        <div className={setTablet}>\r\n            <div className={MaxValueInputClass}>max value: <input type=\"number\" value={inMaxValue}\r\n                                                                  onChange={onChangeInMaxValue}/></div>\r\n            <div className={StartValueInputClass}>start value: <input type=\"number\" value={inStartValue}\r\n                                                                      onChange={onChangeInStartValue}/></div>\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport {Tablet} from './Tablet/Tablet';\r\nimport s from './Counter.module.css'\r\nimport {Btn} from './btn/btn';\r\nimport {SetTablet} from './setTablet/setTablet';\r\n\r\nconst {counter, btn, counterFlex} = s;\r\n\r\ntype CounterPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf: Dispatch<SetStateAction<boolean>>\r\n    inStartValue: number\r\n    setInStartValue: (newX: number) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: number) => void\r\n    countValue: number\r\n    updateCountValue: () => void\r\n    setStartValue: Dispatch<SetStateAction<number>>\r\n    setMaxValue: Dispatch<SetStateAction<number>>\r\n    resetCountValue: () => void\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\n\r\nexport const Counter = (pr: CounterPropsType) => {\r\n\r\n    const {\r\n        countValue, updateCountValue, resetCountValue,\r\n        maxValue,\r\n        startValue, setStartValue, setMaxValue,\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue,\r\n        btnOnOf, setBtnOnOf\r\n    } = pr;\r\n\r\n    return (<div className={counterFlex}>\r\n            <div className={counter}>\r\n                <Tablet inStartValue={inStartValue}\r\n                        btnOnOf={btnOnOf}\r\n                        maxValue={maxValue}\r\n                        countValue={countValue}\r\n                        inMaxValue={inMaxValue}/>\r\n                <div className={btn}>\r\n                    <Btn\r\n                        btnOnOf={btnOnOf}\r\n                        inStartValue={inStartValue}\r\n                        inMaxValue={inMaxValue}\r\n                        maxValue={maxValue}\r\n                        countValue={countValue}\r\n                        typeBtn={'inc'}\r\n                        updateCountValue={updateCountValue}/>\r\n                    <Btn btnOnOf={btnOnOf}\r\n                         inStartValue={inStartValue}\r\n                         inMaxValue={inMaxValue}\r\n                         countValue={countValue}\r\n                         typeBtn={'reset'}\r\n                         resetCountValue={resetCountValue}\r\n                         startValue={startValue}/>\r\n                </div>\r\n            </div>\r\n            <div className={counter}>\r\n                <SetTablet setBtnOnOf={setBtnOnOf}\r\n                           setInStartValue={setInStartValue}\r\n                           setInMaxValue={setInMaxValue}\r\n                           inMaxValue={inMaxValue}\r\n                           inStartValue={inStartValue}/>\r\n                <div className={btn}>\r\n                    <Btn btnOnOf={btnOnOf}\r\n                         setBtnOnOf={setBtnOnOf}\r\n                         resetCountValue={resetCountValue}\r\n                         setMaxValue={setMaxValue}\r\n                         countValue={countValue}\r\n                         typeBtn={'set'}\r\n                         inMaxValue={inMaxValue}\r\n                         inStartValue={inStartValue}\r\n                         setStartValue={setStartValue}\r\n                         startValue={startValue}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from './components/Counter/Counter';\n\n\nconst App = () => {\n    let [countValue, setCountValue] = useState<number>(0)\n\n    let [maxValue, setMaxValue] = useState<number>(5)\n    let [startValue, setStartValue] = useState<number>(0)\n\n    let [inStartValue, setInStartValue] = useState<number>(0);\n    let [inMaxValue, setInMaxValue] = useState<number>(5);\n\n    let [btnOnOf, setBtnOnOf] = useState<boolean>(true);\n\n    const inStartValueLS = () => {\n        let inStartValue = localStorage.getItem('InStartValue')\n        if (inStartValue) {\n            let newInStart = JSON.parse(inStartValue);\n            setInStartValue(newInStart);\n        }\n    }\n    const inMaxValueLS = () => {\n        let inMaxValue = localStorage.getItem('InMaxValue')\n        if (inMaxValue) {\n            let newInMax = JSON.parse(inMaxValue);\n            setInMaxValue(newInMax);\n        }\n    }\n    const countValueLS = () => {\n        let countValue = localStorage.getItem('countValue')\n        if (countValue) {\n            let newCountValue = JSON.parse(countValue);\n            setCountValue(newCountValue);\n        }\n    }\n\n\n    useEffect(() => {\n        inStartValueLS()\n        inMaxValueLS()\n        countValueLS()\n\n    }, [])\n\n\n    const updateCountValue = () => {\n        if (countValue < inMaxValue) {\n            let newNum = ++countValue;\n            setCountValue(newNum)\n            localStorage.setItem('countValue', JSON.stringify(newNum));\n        }\n    }\n\n    const resetCountValue = () => {\n        setCountValue(inStartValue);\n        setMaxValue(inMaxValue);\n        localStorage.setItem('countValue', JSON.stringify(inStartValue))\n    }\n\n\n    return (\n        <Counter inStartValue={inStartValue}\n                 setInStartValue={setInStartValue}\n                 inMaxValue={inMaxValue}\n                 setInMaxValue={setInMaxValue}\n                 startValue={startValue}\n                 setStartValue={setStartValue}\n                 setMaxValue={setMaxValue}\n                 maxValue={maxValue}\n                 countValue={countValue}\n                 updateCountValue={updateCountValue}\n                 resetCountValue={resetCountValue}\n                 btnOnOf={btnOnOf}\n                 setBtnOnOf={setBtnOnOf}\n        />\n    );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n    ReactDOM.render(\n        <App />,\n        document.getElementById('root')\n    );\n"],"sourceRoot":""}