{"version":3,"sources":["components/CounterNew/btn/btnNew.module.css","components/Counter/btn/btn.module.css","components/Counter/setTablet/setTablet.module.css","components/CounterNew/SeterTablet/setTablet/setTabletNew.module.css","components/Counter/Tablet/Tablet.module.css","components/Counter/Counter.module.css","components/CounterNew/CounterNew.module.css","components/CounterNew/NativeTablet/Tablet/TabletNew.module.css","components/CounterNew/NativeTablet/NativeTablet.module.css","components/CounterNew/SeterTablet/SeterTablet.module.css","components/Counter/Tablet/Tablet.tsx","components/Counter/btn/btn.tsx","components/Counter/setTablet/setTablet.tsx","components/Counter/Counter.tsx","components/CounterNew/NativeTablet/Tablet/TabletNew.tsx","components/CounterNew/btn/btnNew.tsx","components/CounterNew/NativeTablet/NativeTablet.tsx","components/CounterNew/SeterTablet/setTablet/setTabletNew.tsx","components/CounterNew/SeterTablet/SeterTablet.tsx","components/CounterNew/CounterNew.tsx","App.tsx","index.tsx"],"names":["module","exports","tablet","s","tabletTop","setMsg","Tablet","pr","countValue","btnOnOf","maxValue","inStartValue","inMaxValue","finallyCheck","className","resetBtn","resetBtnOff","incBtn","incBtnOff","setBtn","setBtnOffCl","Btn","resetCountValue","updateCountValue","typeBtn","setStartValue","setMaxValue","setBtnOnOf","start_max_value","startValue","inStartValueCheck","resetBtnDisabledChecker","incBtnDisabledChecker","setBtnDisabledChecker","resetBtnClass","incClass","setBtnClass","resetButton","disabled","onClick","incButton","setButton","localStorage","setItem","JSON","stringify","setTablet","maxValueCl","startValueCl","maxValueClError","startValueClError","SetTablet","setInStartValue","setInMaxValue","MaxValueInputClass","StartValueInputClass","type","value","onChange","e","currentTarget","counter","btn","counterFlex","Counter","TabletNew","newSetBtnClass","BtnNew","btnVer","setBtnVer","BtnPath","PATH","Second_ver","First_ver","BtnPathText","NewSetButton","to","PATHS","setCounter","ChangeButton","SetCloneNavBtn","NativeCounter","NativeTablet","SetTabletNew","SeterTablet","CounterNew","path","exact","render","App","useState","setCountValue","countValueN","setCountValueN","maxValueN","setMaxValueN","startValueN","setStartValueN","inStartValueN","setInStartValueN","inMaxValueN","setInMaxValueN","btnOnOfN","setBtnOnOfN","useEffect","getItem","newInStart","parse","inStartValueLS","inStartValueLSN","newInMax","inMaxValueLS","inMaxValueLSN","newCountValue","countValueLS","countValueLSN","newNum","updateCountValueN","resetCountValueN","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.00c5d764.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"resetBtn\":\"btnNew_resetBtn__Nmsg3\",\"resetBtnOff\":\"btnNew_resetBtnOff__1P3z1\",\"setBtn\":\"btnNew_setBtn__39LNI\",\"setBtnOffCl\":\"btnNew_setBtnOffCl__2up5a\",\"incBtn\":\"btnNew_incBtn__3_R34\",\"incBtnOff\":\"btnNew_incBtnOff__3iAi_\",\"newSetBtnClass\":\"btnNew_newSetBtnClass__3lJ8b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resetBtn\":\"btn_resetBtn__3WkMB\",\"resetBtnOff\":\"btn_resetBtnOff__1zr0Q\",\"setBtn\":\"btn_setBtn__hCjW2\",\"setBtnOffCl\":\"btn_setBtnOffCl__3oceA\",\"incBtn\":\"btn_incBtn__UG930\",\"incBtnOff\":\"btn_incBtnOff__3avTM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setTablet\":\"setTablet_setTablet__2FwGk\",\"maxValueCl\":\"setTablet_maxValueCl__2NJEZ\",\"startValueCl\":\"setTablet_startValueCl__3HabI\",\"maxValueClError\":\"setTablet_maxValueClError__3S_Pa\",\"startValueClError\":\"setTablet_startValueClError__1JE23\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setTablet\":\"setTabletNew_setTablet__3dpa9\",\"maxValueCl\":\"setTabletNew_maxValueCl__24Gg7\",\"startValueCl\":\"setTabletNew_startValueCl__1rIPW\",\"maxValueClError\":\"setTabletNew_maxValueClError__19zMm\",\"startValueClError\":\"setTabletNew_startValueClError__1nO8X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablet\":\"Tablet_tablet__lVZqX\",\"tabletTop\":\"Tablet_tabletTop__2z988\",\"setMsg\":\"Tablet_setMsg__zSZ9Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1Z09q\",\"btn\":\"Counter_btn__18Q6H\",\"counterFlex\":\"Counter_counterFlex__CxVc7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"CounterNew_counter__cTnUP\",\"btn\":\"CounterNew_btn__17dCR\",\"counterFlex\":\"CounterNew_counterFlex__1ixVY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablet\":\"TabletNew_tablet__1tKAY\",\"tabletTop\":\"TabletNew_tabletTop__3Homs\",\"setMsg\":\"TabletNew_setMsg__1w_0F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"NativeTablet_counter__3BJAs\",\"btn\":\"NativeTablet_btn__25DOD\",\"counterFlex\":\"NativeTablet_counterFlex__27bDL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"SeterTablet_counter__2vdbU\",\"btn\":\"SeterTablet_btn__1a6IK\",\"counterFlex\":\"SeterTablet_counterFlex__1gTba\"};","import React from 'react';\r\nimport s from './Tablet.module.css';\r\n\r\nconst {tablet, tabletTop, setMsg} = s;\r\n\r\ntype TabletPropsType = {\r\n    countValue: number\r\n    maxValue: number\r\n    btnOnOf: boolean\r\n    inStartValue: number\r\n    inMaxValue: number\r\n}\r\n\r\n\r\nexport const Tablet = (pr: TabletPropsType) => {\r\n    const {countValue, maxValue, btnOnOf, inStartValue, inMaxValue} = pr;\r\n\r\n\r\n\r\n    const StartValueCheck = inStartValue >= 0 ?\r\n        <div>\r\n            {btnOnOf && countValue}\r\n            {!btnOnOf && <div className={setMsg}>Press 'set' to programm counter</div>}\r\n        </div>\r\n        :\r\n        <div className={setMsg}>Start value must be 0(zero) or greater</div>;\r\n\r\n\r\n    const start_max_check = inStartValue < inMaxValue ?\r\n        StartValueCheck\r\n        :\r\n        <div className={setMsg}>Max value must be greater than Start Value</div>\r\n\r\n\r\n    const inMaxValueCheck =  countValue <= inMaxValue ?\r\n        start_max_check\r\n        :\r\n        <div className={setMsg}>Please type reset!</div>\r\n\r\n    const finallyCheck = countValue >= inStartValue ?\r\n        inMaxValueCheck\r\n        :\r\n        <div className={setMsg}>Please type set!</div>\r\n\r\n\r\n    return (\r\n        <div className={+countValue < inMaxValue ? tablet : tabletTop}>\r\n            {finallyCheck}\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport s from './btn.module.css';\r\n\r\nconst {resetBtn, resetBtnOff, incBtn, incBtnOff, setBtn, setBtnOffCl} = s;\r\n\r\ntype BtnPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf?: Dispatch<SetStateAction<boolean>>\r\n    startValue?: number\r\n    resetCountValue?: () => void\r\n    countValue: number\r\n    updateCountValue?: () => void\r\n    typeBtn: 'reset' | 'inc' | 'set'\r\n    maxValue?: any\r\n    inMaxValue: number\r\n    inStartValue: number\r\n    setStartValue?: Dispatch<SetStateAction<number>>\r\n    setMaxValue?: Dispatch<SetStateAction<number>>\r\n}\r\n\r\n\r\nexport const Btn = (pr: BtnPropsType) => {\r\n\r\n    const {\r\n        resetCountValue, countValue, updateCountValue,\r\n        typeBtn,\r\n        maxValue, inMaxValue, inStartValue, setStartValue,\r\n        setMaxValue,\r\n        btnOnOf, setBtnOnOf, startValue,\r\n    } = pr;\r\n\r\n    const start_max_value = inStartValue > inMaxValue;\r\n    const inStartValueCheck = inStartValue < 0\r\n    const disResetBtn = countValue === inStartValue;\r\n    const disInc = countValue >= inMaxValue\r\n\r\n    const resetBtnClassChecker = countValue > 0 && !inStartValueCheck && btnOnOf && !start_max_value; //тернарники\r\n    const incClassChecker = countValue < inMaxValue && !inStartValueCheck && btnOnOf && !start_max_value;// для классов кнопок(ошибка/нет ошибки)\r\n    const setBtnClassChecker = btnOnOf || inStartValueCheck || start_max_value;\r\n\r\n    const resetBtnDisabledChecker = !btnOnOf || disResetBtn || inStartValueCheck || start_max_value;//тернарники для отключения кнопок\r\n    const incBtnDisabledChecker = !btnOnOf || disInc || inStartValueCheck || start_max_value;\r\n    const setBtnDisabledChecker = btnOnOf || inStartValueCheck || start_max_value;\r\n\r\n    const resetBtnClass = resetBtnClassChecker ? resetBtn : resetBtnOff // присваиваем переменным классы в зависимости от тернарников выше\r\n    const incClass = incClassChecker ? incBtn : incBtnOff\r\n    const setBtnClass = setBtnClassChecker ? setBtnOffCl : setBtn;\r\n\r\n    const onClickSet = () => {\r\n        if (resetCountValue) {\r\n            resetCountValue()\r\n            localStorage.setItem('InStartValue', JSON.stringify(inStartValue));\r\n            localStorage.setItem('InMaxValue', JSON.stringify(inMaxValue));\r\n        }\r\n        if (setBtnOnOf) {\r\n            setBtnOnOf(true);\r\n        }\r\n    }\r\n\r\n\r\n    const resetButton = typeBtn === 'reset' ? <div className={resetBtnClass}>\r\n        <button disabled={resetBtnDisabledChecker}\r\n                onClick={resetCountValue}>reset\r\n        </button>\r\n    </div> : '';\r\n\r\n    const incButton = typeBtn === 'inc' ? <div className={incClass}>\r\n        <button disabled={incBtnDisabledChecker} onClick={updateCountValue}>inc\r\n        </button>\r\n    </div> : '';\r\n    const setButton = typeBtn === 'set' ? <div className={setBtnClass}>\r\n        <button disabled={setBtnDisabledChecker} onClick={onClickSet}>set</button>\r\n    </div> : '';\r\n\r\n    return (<div>\r\n            {resetButton}\r\n            {incButton}\r\n            {setButton}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEventHandler, Dispatch, SetStateAction} from 'react';\r\nimport s from './setTablet.module.css';\r\n\r\nconst {setTablet, maxValueCl, startValueCl, maxValueClError, startValueClError} = s;\r\n\r\ntype TabletPropsType = {\r\n    setBtnOnOf: Dispatch<SetStateAction<boolean>>\r\n    inStartValue: number\r\n    setInStartValue: (newX: any) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: any) => void\r\n}\r\n\r\n\r\nexport const SetTablet = (pr: TabletPropsType) => {\r\n    const {\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue, setBtnOnOf\r\n    } = pr;\r\n\r\n    const start_max_value = inStartValue < inMaxValue;\r\n    const onChangeInMaxValue: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.currentTarget.value) {\r\n\r\n            setInMaxValue(+e.currentTarget.value);\r\n        } else {\r\n            setInMaxValue('');\r\n        }\r\n        setBtnOnOf(false);\r\n    }\r\n\r\n    const onChangeInStartValue: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.currentTarget.value) {\r\n            setInStartValue(e.currentTarget.value);\r\n        } else {\r\n            setInStartValue('');\r\n        }\r\n        setBtnOnOf(false);\r\n    }\r\n\r\n    const MaxValueInputClass = inMaxValue && start_max_value ? maxValueCl : maxValueClError;\r\n    const StartValueInputClass = inStartValue > -1 && start_max_value ? startValueCl : startValueClError;\r\n\r\n    return (\r\n        <div className={setTablet}>\r\n            <div className={MaxValueInputClass}>max value: <input type=\"number\" value={inMaxValue}\r\n                                                                  onChange={onChangeInMaxValue}/></div>\r\n            <div className={StartValueInputClass}>start value: <input type=\"number\" value={inStartValue}\r\n                                                                      onChange={onChangeInStartValue}/></div>\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport {Tablet} from './Tablet/Tablet';\r\nimport s from './Counter.module.css'\r\nimport {Btn} from './btn/btn';\r\nimport {SetTablet} from './setTablet/setTablet';\r\n\r\nconst {counter, btn, counterFlex} = s;\r\n\r\ntype CounterPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf: Dispatch<SetStateAction<boolean>>\r\n    inStartValue: number\r\n    setInStartValue: (newX: number) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: number) => void\r\n    countValue: number\r\n    updateCountValue: () => void\r\n    setStartValue: Dispatch<SetStateAction<number>>\r\n    setMaxValue: Dispatch<SetStateAction<number>>\r\n    resetCountValue: () => void\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\n\r\nexport const Counter = (pr: CounterPropsType) => {\r\n\r\n    const {\r\n        countValue, updateCountValue, resetCountValue,\r\n        maxValue,\r\n        startValue, setStartValue, setMaxValue,\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue,\r\n        btnOnOf, setBtnOnOf\r\n    } = pr;\r\n\r\n    return (<div className={counterFlex}>\r\n            <div className={counter}>\r\n                <Tablet inStartValue={inStartValue}\r\n                        btnOnOf={btnOnOf}\r\n                        maxValue={maxValue}\r\n                        countValue={countValue}\r\n                        inMaxValue={inMaxValue}/>\r\n                <div className={btn}>\r\n                    <Btn\r\n                        btnOnOf={btnOnOf}\r\n                        inStartValue={inStartValue}\r\n                        inMaxValue={inMaxValue}\r\n                        maxValue={maxValue}\r\n                        countValue={countValue}\r\n                        typeBtn={'inc'}\r\n                        updateCountValue={updateCountValue}/>\r\n                    <Btn btnOnOf={btnOnOf}\r\n                         inStartValue={inStartValue}\r\n                         inMaxValue={inMaxValue}\r\n                         countValue={countValue}\r\n                         typeBtn={'reset'}\r\n                         resetCountValue={resetCountValue}\r\n                         startValue={startValue}/>\r\n                </div>\r\n            </div>\r\n            <div className={counter}>\r\n                <SetTablet setBtnOnOf={setBtnOnOf}\r\n                           setInStartValue={setInStartValue}\r\n                           setInMaxValue={setInMaxValue}\r\n                           inMaxValue={inMaxValue}\r\n                           inStartValue={inStartValue}/>\r\n                <div className={btn}>\r\n                    <Btn btnOnOf={btnOnOf}\r\n                         setBtnOnOf={setBtnOnOf}\r\n                         resetCountValue={resetCountValue}\r\n                         setMaxValue={setMaxValue}\r\n                         countValue={countValue}\r\n                         typeBtn={'set'}\r\n                         inMaxValue={inMaxValue}\r\n                         inStartValue={inStartValue}\r\n                         setStartValue={setStartValue}\r\n                         startValue={startValue}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './TabletNew.module.css';\r\n\r\nconst {tablet, tabletTop, setMsg} = s;\r\n\r\ntype TabletPropsType = {\r\n    countValue: number\r\n    maxValue: number\r\n    btnOnOf: boolean\r\n    inStartValue: number\r\n    inMaxValue: number\r\n}\r\n\r\n\r\nexport const TabletNew = (pr: TabletPropsType) => {\r\n    const {countValue, maxValue, btnOnOf, inStartValue, inMaxValue} = pr;\r\n\r\n\r\n\r\n    const StartValueCheck = inStartValue >= 0 ?\r\n        <div>\r\n            {btnOnOf && countValue}\r\n            {!btnOnOf && <div className={setMsg}>Press 'set' to programm counter</div>}\r\n        </div>\r\n        :\r\n        <div className={setMsg}>Start value must be 0(zero) or greater</div>;\r\n\r\n\r\n    const start_max_check = inStartValue < inMaxValue ?\r\n        StartValueCheck\r\n        :\r\n        <div className={setMsg}>Max value must be greater than Start Value</div>\r\n\r\n\r\n    const inMaxValueCheck =  countValue <= inMaxValue ?\r\n        start_max_check\r\n        :\r\n        <div className={setMsg}>Please type reset!</div>\r\n\r\n    const finallyCheck = countValue >= inStartValue ?\r\n        inMaxValueCheck\r\n        :\r\n        <div className={setMsg}>Please type set!</div>\r\n\r\n\r\n    return (\r\n        <div className={+countValue < inMaxValue ? tablet : tabletTop}>\r\n            {finallyCheck}\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport s from './btnNew.module.css';\r\nimport {PATHS} from '../CounterNew';\r\nimport {NavLink} from 'react-router-dom'\r\nimport {PATH} from '../../../App';\r\n\r\nconst {resetBtn, resetBtnOff, incBtn, incBtnOff, setBtn, setBtnOffCl, newSetBtnClass} = s;\r\n\r\ntype BtnPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf?: Dispatch<SetStateAction<boolean>>\r\n    startValue?: number\r\n    resetCountValue?: () => void\r\n    countValue: number\r\n    updateCountValue?: () => void\r\n    typeBtn: 'reset' | 'inc' | 'set' | 'newSet' | 'NavSet' | 'ChangeBtn'\r\n    maxValue?: any\r\n    inMaxValue: number\r\n    inStartValue: number\r\n    setStartValue?: Dispatch<SetStateAction<number>>\r\n    setMaxValue?: Dispatch<SetStateAction<number>>\r\n    btnVer?:boolean\r\n    setBtnVer?:Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\n\r\nexport const BtnNew = (pr: BtnPropsType) => {\r\n\r\n    const {\r\n        resetCountValue, countValue, updateCountValue,\r\n        typeBtn,\r\n        maxValue, inMaxValue, inStartValue, setStartValue,\r\n        setMaxValue,\r\n        btnOnOf, setBtnOnOf, startValue, btnVer, setBtnVer\r\n    } = pr;\r\n\r\n    const start_max_value = inStartValue > inMaxValue;\r\n    const inStartValueCheck = inStartValue < 0\r\n    const disResetBtn = countValue === inStartValue;\r\n    const disInc = countValue >= inMaxValue\r\n\r\n    const resetBtnClassChecker = countValue > 0 && !inStartValueCheck && btnOnOf && !start_max_value; //тернарники\r\n    const incClassChecker = countValue < inMaxValue && !inStartValueCheck && btnOnOf && !start_max_value;// для классов кнопок(ошибка/нет ошибки)\r\n    const setBtnClassChecker = btnOnOf || inStartValueCheck || start_max_value;\r\n\r\n    const resetBtnDisabledChecker = !btnOnOf || disResetBtn || inStartValueCheck || start_max_value;//тернарники для отключения кнопок\r\n    const incBtnDisabledChecker = !btnOnOf || disInc || inStartValueCheck || start_max_value;\r\n    const setBtnDisabledChecker = btnOnOf || inStartValueCheck || start_max_value;\r\n\r\n    const resetBtnClass = resetBtnClassChecker ? resetBtn : resetBtnOff // присваиваем переменным классы в зависимости от тернарников выше\r\n    const incClass = incClassChecker ? incBtn : incBtnOff\r\n    const setBtnClass = setBtnClassChecker ? setBtnOffCl : setBtn;\r\n\r\n    const onClickSet = () => {\r\n        if (resetCountValue) {\r\n            resetCountValue()\r\n            localStorage.setItem('InStartValue', JSON.stringify(inStartValue));\r\n            localStorage.setItem('InMaxValue', JSON.stringify(inMaxValue));\r\n        }\r\n        if (setBtnOnOf) {\r\n            setBtnOnOf(true);\r\n        }\r\n    }\r\n    const onClickSetN = () => {\r\n        if (resetCountValue) {\r\n            resetCountValue()\r\n            localStorage.setItem('InStartValueN', JSON.stringify(inStartValue));\r\n            localStorage.setItem('InMaxValueN', JSON.stringify(inMaxValue));\r\n        }\r\n        if (setBtnOnOf) {\r\n            setBtnOnOf(true);\r\n        }\r\n    }\r\n\r\n    const BtnPath = btnVer? PATH.Second_ver : PATH.First_ver;\r\n    const BtnPathText = btnVer? 'Go to the second ver.':'Go to the first ver.';\r\n    const OnClickChangePathBtn = ()=>{\r\n        if(setBtnVer) {\r\n            setBtnVer(!btnVer)\r\n        }\r\n    }\r\n\r\n\r\n    const resetButton = typeBtn === 'reset' ? <div className={resetBtnClass}>\r\n        <button disabled={resetBtnDisabledChecker}\r\n                onClick={resetCountValue}>reset\r\n        </button>\r\n    </div> : '';\r\n\r\n    const incButton = typeBtn === 'inc' ? <div className={incClass}>\r\n        <button disabled={incBtnDisabledChecker} onClick={updateCountValue}>inc\r\n        </button>\r\n    </div> : '';\r\n    const setButton = typeBtn === 'set' ? <div className={setBtnClass}>\r\n        <button disabled={setBtnDisabledChecker} onClick={onClickSet}>set</button>\r\n    </div> : '';\r\n    const NewSetButton = typeBtn === 'newSet' ?\r\n        <NavLink to={PATHS.setCounter} className={newSetBtnClass}>\r\n            <button>set</button>\r\n        </NavLink>\r\n        : '';\r\n    const ChangeButton = typeBtn === 'ChangeBtn' ?\r\n        <NavLink to={BtnPath} className={newSetBtnClass}>\r\n            <button onClick={OnClickChangePathBtn}>{BtnPathText}</button>\r\n        </NavLink>\r\n        : '';\r\n    const SetCloneNavBtn = typeBtn === 'NavSet' ? <NavLink to={PATHS.NativeCounter}>\r\n        <div className={setBtnClass}>\r\n            <button disabled={setBtnDisabledChecker} onClick={onClickSetN}>set</button>\r\n        </div>\r\n    </NavLink> : '';\r\n\r\n    return (<div>\r\n            {resetButton}\r\n            {incButton}\r\n            {setButton}\r\n            {NewSetButton}\r\n            {SetCloneNavBtn}\r\n            {ChangeButton}\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport {TabletNew} from './Tablet/TabletNew';\r\nimport s from './NativeTablet.module.css'\r\nimport {BtnNew} from '../btn/btnNew';\r\n\r\n\r\nconst {counter, btn, counterFlex} = s;\r\n\r\ntype NativeTabletPropsType = {\r\n    btnOnOf: boolean\r\n    inStartValue: number\r\n    inMaxValue: number\r\n    countValue: number\r\n    updateCountValue: () => void\r\n    resetCountValue: () => void\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\n\r\nexport const NativeTablet = (pr: NativeTabletPropsType) => {\r\n\r\n\r\n    const {\r\n        countValue, updateCountValue, resetCountValue,\r\n        maxValue,\r\n        startValue, inStartValue, inMaxValue,\r\n        btnOnOf\r\n    } = pr;\r\n\r\n    return (\r\n\r\n        <div className={counter}>\r\n            <TabletNew inStartValue={inStartValue}\r\n                       btnOnOf={btnOnOf}\r\n                       maxValue={maxValue}\r\n                       countValue={countValue}\r\n                       inMaxValue={inMaxValue}/>\r\n            <div className={btn}>\r\n                <BtnNew\r\n                    btnOnOf={btnOnOf}\r\n                    inStartValue={inStartValue}\r\n                    inMaxValue={inMaxValue}\r\n                    maxValue={maxValue}\r\n                    countValue={countValue}\r\n                    typeBtn={'inc'}\r\n                    updateCountValue={updateCountValue}/>\r\n                <BtnNew btnOnOf={btnOnOf}\r\n                        inStartValue={inStartValue}\r\n                        inMaxValue={inMaxValue}\r\n                        countValue={countValue}\r\n                        typeBtn={'reset'}\r\n                        resetCountValue={resetCountValue}\r\n                        startValue={startValue}/>\r\n                <BtnNew btnOnOf={btnOnOf}\r\n                        inStartValue={inStartValue}\r\n                        inMaxValue={inMaxValue}\r\n                        countValue={countValue}\r\n                        resetCountValue={resetCountValue}\r\n                        startValue={startValue}\r\n                        typeBtn={'newSet'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEventHandler, Dispatch, SetStateAction} from 'react';\r\nimport s from './setTabletNew.module.css';\r\n\r\nconst {setTablet, maxValueCl, startValueCl, maxValueClError, startValueClError} = s;\r\n\r\ntype TabletPropsType = {\r\n    setBtnOnOf: Dispatch<SetStateAction<boolean>>\r\n    inStartValue: number\r\n    setInStartValue: (newX: any) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: any) => void\r\n}\r\n\r\n\r\nexport const SetTabletNew = (pr: TabletPropsType) => {\r\n    const {\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue, setBtnOnOf\r\n    } = pr;\r\n\r\n    const start_max_value = inStartValue < inMaxValue;\r\n    const onChangeInMaxValue: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.currentTarget.value) {\r\n\r\n            setInMaxValue(+e.currentTarget.value);\r\n        } else {\r\n            setInMaxValue('');\r\n        }\r\n        setBtnOnOf(false);\r\n    }\r\n\r\n    const onChangeInStartValue: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.currentTarget.value) {\r\n            setInStartValue(e.currentTarget.value);\r\n        } else {\r\n            setInStartValue('');\r\n        }\r\n        setBtnOnOf(false);\r\n    }\r\n\r\n    const MaxValueInputClass = inMaxValue && start_max_value ? maxValueCl : maxValueClError;\r\n    const StartValueInputClass = inStartValue > -1 && start_max_value ? startValueCl : startValueClError;\r\n\r\n    return (\r\n        <div className={setTablet}>\r\n            <div className={MaxValueInputClass}>max value: <input type=\"number\" value={inMaxValue}\r\n                                                                  onChange={onChangeInMaxValue}/></div>\r\n            <div className={StartValueInputClass}>start value: <input type=\"number\" value={inStartValue}\r\n                                                                      onChange={onChangeInStartValue}/></div>\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport s from './SeterTablet.module.css'\r\nimport {BtnNew} from '../btn/btnNew';\r\nimport {SetTabletNew} from './setTablet/setTabletNew';\r\n\r\n\r\nconst {counter, btn} = s;\r\n\r\ntype SeterTabletPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf: Dispatch<SetStateAction<boolean>>\r\n    inStartValue: number\r\n    setInStartValue: (newX: number) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: number) => void\r\n    countValue: number\r\n    setStartValue: Dispatch<SetStateAction<number>>\r\n    setMaxValue: Dispatch<SetStateAction<number>>\r\n    resetCountValue: () => void\r\n    startValue: number\r\n}\r\n\r\n\r\nexport const SeterTablet = (pr: SeterTabletPropsType) => {\r\n\r\n\r\n    const {\r\n        countValue, resetCountValue,\r\n        startValue, setStartValue, setMaxValue,\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue,\r\n        btnOnOf, setBtnOnOf\r\n    } = pr;\r\n\r\n    return (\r\n        <div className={counter}>\r\n            <SetTabletNew setBtnOnOf={setBtnOnOf}\r\n                          setInStartValue={setInStartValue}\r\n                          setInMaxValue={setInMaxValue}\r\n                          inMaxValue={inMaxValue}\r\n                          inStartValue={inStartValue}/>\r\n            <div className={btn}>\r\n                <BtnNew btnOnOf={btnOnOf}\r\n                        setBtnOnOf={setBtnOnOf}\r\n                        resetCountValue={resetCountValue}\r\n                        setMaxValue={setMaxValue}\r\n                        countValue={countValue}\r\n                        typeBtn={'NavSet'}\r\n                        inMaxValue={inMaxValue}\r\n                        inStartValue={inStartValue}\r\n                        setStartValue={setStartValue}\r\n                        startValue={startValue}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Dispatch, SetStateAction} from 'react';\r\nimport {TabletNew} from './NativeTablet/Tablet/TabletNew';\r\nimport s from './CounterNew.module.css'\r\n\r\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {NativeTablet} from './NativeTablet/NativeTablet';\r\nimport {SeterTablet} from './SeterTablet/SeterTablet';\r\n\r\nconst {counter, btn, counterFlex} = s;\r\n\r\ntype CounterPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf: Dispatch<SetStateAction<boolean>>\r\n    inStartValue: number\r\n    setInStartValue: (newX: number) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: number) => void\r\n    countValue: number\r\n    updateCountValue: () => void\r\n    setStartValue: Dispatch<SetStateAction<number>>\r\n    setMaxValue: Dispatch<SetStateAction<number>>\r\n    resetCountValue: () => void\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\nexport const PATHS = {\r\n    NativeCounter: '/second/nativeCounter',\r\n    setCounter: '/second/setTablet',\r\n}\r\n\r\nexport const CounterNew = (pr: CounterPropsType) => {\r\n\r\n\r\n    const {\r\n        countValue, updateCountValue, resetCountValue,\r\n        maxValue,\r\n        startValue, setStartValue, setMaxValue,\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue,\r\n        btnOnOf, setBtnOnOf\r\n    } = pr;\r\n\r\n    return (\r\n\r\n        <div className={counterFlex}>\r\n\r\n            <Switch>\r\n\r\n                <Route path={'/second/'} exact render={() => <Redirect to={PATHS.NativeCounter}/>}/>\r\n\r\n\r\n                <Route path={PATHS.NativeCounter} render={() => <NativeTablet inStartValue={inStartValue}\r\n                                                                              inMaxValue={inMaxValue}\r\n                                                                              startValue={startValue}\r\n                                                                              maxValue={maxValue}\r\n                                                                              countValue={countValue}\r\n                                                                              updateCountValue={updateCountValue}\r\n                                                                              resetCountValue={resetCountValue}\r\n                                                                              btnOnOf={btnOnOf}\r\n                />}/>\r\n\r\n\r\n                <Route path={PATHS.setCounter} render={() => <SeterTablet inStartValue={inStartValue}\r\n                                                                          setInStartValue={setInStartValue}\r\n                                                                          inMaxValue={inMaxValue}\r\n                                                                          setInMaxValue={setInMaxValue}\r\n                                                                          startValue={startValue}\r\n                                                                          setStartValue={setStartValue}\r\n                                                                          setMaxValue={setMaxValue}\r\n                                                                          countValue={countValue}\r\n                                                                          resetCountValue={resetCountValue}\r\n                                                                          btnOnOf={btnOnOf}\r\n                                                                          setBtnOnOf={setBtnOnOf}\r\n                />}/>\r\n\r\n            </Switch>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from './components/Counter/Counter';\nimport {CounterNew} from './components/CounterNew/CounterNew';\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport {BtnNew} from './components/CounterNew/btn/btnNew';\n\nexport const PATH = {\n    First_ver: '/first',\n    Second_ver: '/second',\n}\n\n\nconst App = () => {\n    let [countValue, setCountValue] = useState<number>(0)\n    let [countValueN, setCountValueN] = useState<number>(0)\n\n    let [maxValue, setMaxValue] = useState<number>(5)\n    let [maxValueN, setMaxValueN] = useState<number>(5)\n\n\n    let [startValue, setStartValue] = useState<number>(0)\n    let [startValueN, setStartValueN] = useState<number>(0)\n\n    let [inStartValue, setInStartValue] = useState<number>(0);\n    let [inStartValueN, setInStartValueN] = useState<number>(0);\n\n\n    let [inMaxValue, setInMaxValue] = useState<number>(5);\n    let [inMaxValueN, setInMaxValueN] = useState<number>(5);\n\n    let [btnOnOf, setBtnOnOf] = useState<boolean>(true);\n    let [btnOnOfN, setBtnOnOfN] = useState<boolean>(true);\n\n    const inStartValueLS = () => {\n        let inStartValue = localStorage.getItem('InStartValue')\n        if (inStartValue) {\n            let newInStart = JSON.parse(inStartValue);\n            setInStartValue(newInStart);\n        }\n    }\n\n    const inStartValueLSN = () => {\n        let inStartValue = localStorage.getItem('InStartValueN')\n        if (inStartValue) {\n            let newInStart = JSON.parse(inStartValue);\n            setInStartValueN(newInStart);\n        }\n    }\n\n\n    const inMaxValueLS = () => {\n        let inMaxValue = localStorage.getItem('InMaxValue')\n        if (inMaxValue) {\n            let newInMax = JSON.parse(inMaxValue);\n            setInMaxValue(newInMax);\n        }\n    }\n\n    const inMaxValueLSN = () => {\n        let inMaxValue = localStorage.getItem('InMaxValueN')\n        if (inMaxValue) {\n            let newInMax = JSON.parse(inMaxValue);\n            setInMaxValueN(newInMax);\n        }\n    }\n\n\n    const countValueLS = () => {\n        let countValue = localStorage.getItem('countValue')\n        if (countValue) {\n            let newCountValue = JSON.parse(countValue);\n            setCountValue(newCountValue);\n        }\n    }\n\n    const countValueLSN = () => {\n        let countValue = localStorage.getItem('countValueN')\n        if (countValue) {\n            let newCountValue = JSON.parse(countValue);\n            setCountValueN(newCountValue);\n        }\n    }\n\n\n    useEffect(() => {\n        inStartValueLS()\n        inStartValueLSN()\n        inMaxValueLS()\n        inMaxValueLSN()\n        countValueLS()\n        countValueLSN()\n\n    }, [])\n\n\n    const updateCountValue = () => {\n        if (countValue < inMaxValue) {\n            let newNum = ++countValue;\n            setCountValue(newNum)\n            localStorage.setItem('countValue', JSON.stringify(newNum));\n        }\n    }\n\n    const updateCountValueN = () => {\n        if (countValueN < inMaxValueN) {\n            let newNum = ++countValueN;\n            setCountValueN(newNum)\n            localStorage.setItem('countValueN', JSON.stringify(newNum));\n        }\n    }\n\n    const resetCountValue = () => {\n        setCountValue(inStartValue);\n        setMaxValue(inMaxValue);\n        localStorage.setItem('countValue', JSON.stringify(inStartValue))\n    }\n\n    const resetCountValueN = () => {\n        setCountValueN(inStartValueN);\n        setMaxValueN(inMaxValueN);\n        localStorage.setItem('countValueN', JSON.stringify(inStartValue))\n    }\n\n    const [btnVer, setBtnVer] = useState(true);\n\n\n    return (<div>\n            <HashRouter>\n                <div className={'BtnToChangeRoute'}>\n                    <BtnNew btnOnOf={btnOnOf}\n                            countValue={countValue}\n                            typeBtn={'ChangeBtn'}\n                            inMaxValue={inMaxValue}\n                            inStartValue={inStartValue}\n                            btnVer={btnVer}\n                            setBtnVer={setBtnVer}/>\n                </div>\n\n\n                <Switch>\n                    <Route path={'/'} exact render={() => <Redirect to={PATH.First_ver}/>}/>\n\n                    <Route path={PATH.First_ver} render={() => <Counter inStartValue={inStartValue}\n                                                                        setInStartValue={setInStartValue}\n                                                                        inMaxValue={inMaxValue}\n                                                                        setInMaxValue={setInMaxValue}\n                                                                        startValue={startValue}\n                                                                        setStartValue={setStartValue}\n                                                                        setMaxValue={setMaxValue}\n                                                                        maxValue={maxValue}\n                                                                        countValue={countValue}\n                                                                        updateCountValue={updateCountValue}\n                                                                        resetCountValue={resetCountValue}\n                                                                        btnOnOf={btnOnOf}\n                                                                        setBtnOnOf={setBtnOnOf}\n                    />}/>\n                    <Route path={PATH.Second_ver} render={() => <CounterNew inStartValue={inStartValueN}\n                                                                            setInStartValue={setInStartValueN}\n                                                                            inMaxValue={inMaxValueN}\n                                                                            setInMaxValue={setInMaxValueN}\n                                                                            startValue={startValueN}\n                                                                            setStartValue={setStartValueN}\n                                                                            setMaxValue={setMaxValueN}\n                                                                            maxValue={maxValueN}\n                                                                            countValue={countValueN}\n                                                                            updateCountValue={updateCountValueN}\n                                                                            resetCountValue={resetCountValueN}\n                                                                            btnOnOf={btnOnOfN}\n                                                                            setBtnOnOf={setBtnOnOfN}\n                    />}/>\n\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n    ReactDOM.render(\n        <App />,\n        document.getElementById('root')\n    );\n"],"sourceRoot":""}